import { renderBlock } from './lib.js';
export class Person {
    constructor(username, avatarUrl) {
        this.username = username;
        this.avatarUrl = avatarUrl;
    }
}
const person1 = new Person('Ann Smith', './img/avatar.png');
const favourites = 'd333';
localStorage.setItem('user', JSON.stringify(person1));
localStorage.setItem('favoritesAmount', favourites.toString());
export function getFavoritesAmount(key) {
    const resp = localStorage.getItem(key);
    const numResp = Number(resp);
    if (isNaN(numResp)) {
        return 0;
    }
    if (typeof (numResp) == 'number') {
        return numResp;
    }
}
export function getUserData(key) {
    const resp = localStorage.getItem(key);
    if (resp == null) {
        return null;
    }
    let value;
    let person;
    try {
        value = JSON.parse(resp);
        person = value;
    }
    catch (_a) {
        return null;
    }
    return person;
}
export function renderUserBlock(userName, avatarLink, favoriteItemsAmount) {
    const favoritesCaption = favoriteItemsAmount ? favoriteItemsAmount : 'ничего нет';
    const hasFavoriteItems = favoriteItemsAmount ? true : false;
    renderBlock('user-block', `
    <div class="header-container">
      <img class="avatar" src=${avatarLink} alt="Wade Warren" />
      <div class="info">
          <p class="name">${userName}</p>
          <p class="fav">
            <i class="heart-icon${hasFavoriteItems ? ' active' : ''}"></i>${favoritesCaption}
          </p>
      </div>
    </div>
    `);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91c2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFHdEMsTUFBTSxPQUFPLE1BQU07SUFJakIsWUFBWSxRQUFnQixFQUFFLFNBQWlCO1FBQzdDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO0lBQzVCLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0FBQzVELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQztBQUMxQixZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDdEQsWUFBWSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUcvRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsR0FBVztJQUM1QyxNQUFNLElBQUksR0FBWSxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNsQixPQUFPLENBQUMsQ0FBQztLQUNWO0lBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksUUFBUSxFQUFFO1FBQ2xDLE9BQU8sT0FBTyxDQUFDO0tBQ2hCO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsR0FBVztJQUNyQyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsSUFBSSxLQUFjLENBQUM7SUFDbkIsSUFBSSxNQUFjLENBQUM7SUFDbkIsSUFBSTtRQUNGLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLE1BQU0sR0FBRyxLQUFlLENBQUM7S0FDMUI7SUFBQyxXQUFNO1FBQ04sT0FBTyxJQUFJLENBQUE7S0FDWjtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLFFBQWdCLEVBQUUsVUFBa0IsRUFBRSxtQkFBNEI7SUFDaEcsTUFBTSxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQTtJQUNqRixNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUU1RCxXQUFXLENBQ1QsWUFBWSxFQUNaOztnQ0FFNEIsVUFBVTs7NEJBRWQsUUFBUTs7a0NBRUYsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLGdCQUFnQjs7OztLQUl2RixDQUNGLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyQmxvY2sgfSBmcm9tICcuL2xpYi5qcydcblxuXG5leHBvcnQgY2xhc3MgUGVyc29uIHtcbiAgdXNlcm5hbWU6IHN0cmluZ1xuICBhdmF0YXJVcmw6IHN0cmluZ1xuXG4gIGNvbnN0cnVjdG9yKHVzZXJuYW1lOiBzdHJpbmcsIGF2YXRhclVybDogc3RyaW5nKSB7XG4gICAgdGhpcy51c2VybmFtZSA9IHVzZXJuYW1lXG4gICAgdGhpcy5hdmF0YXJVcmwgPSBhdmF0YXJVcmxcbiAgfVxufVxuXG5jb25zdCBwZXJzb24xID0gbmV3IFBlcnNvbignQW5uIFNtaXRoJywgJy4vaW1nL2F2YXRhci5wbmcnKTtcbmNvbnN0IGZhdm91cml0ZXMgPSAnZDMzMyc7XG5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcicsIEpTT04uc3RyaW5naWZ5KHBlcnNvbjEpKTtcbmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdmYXZvcml0ZXNBbW91bnQnLCBmYXZvdXJpdGVzLnRvU3RyaW5nKCkpO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGYXZvcml0ZXNBbW91bnQoa2V5OiBzdHJpbmcpOiB1bmtub3duIHtcbiAgY29uc3QgcmVzcDogdW5rbm93biA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gIGNvbnN0IG51bVJlc3AgPSBOdW1iZXIocmVzcCk7XG4gIGlmIChpc05hTihudW1SZXNwKSkge1xuICAgIHJldHVybiAwO1xuICB9IGlmICh0eXBlb2YgKG51bVJlc3ApID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG51bVJlc3A7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJEYXRhKGtleTogc3RyaW5nKTogUGVyc29uIHtcbiAgY29uc3QgcmVzcCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gIGlmIChyZXNwID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBsZXQgdmFsdWU6IHVua25vd247XG4gIGxldCBwZXJzb246IFBlcnNvbjtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IEpTT04ucGFyc2UocmVzcCk7XG4gICAgcGVyc29uID0gdmFsdWUgYXMgUGVyc29uO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIHJldHVybiBwZXJzb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJVc2VyQmxvY2sodXNlck5hbWU6IHN0cmluZywgYXZhdGFyTGluazogc3RyaW5nLCBmYXZvcml0ZUl0ZW1zQW1vdW50PzogbnVtYmVyKSB7XG4gIGNvbnN0IGZhdm9yaXRlc0NhcHRpb24gPSBmYXZvcml0ZUl0ZW1zQW1vdW50ID8gZmF2b3JpdGVJdGVtc0Ftb3VudCA6ICfQvdC40YfQtdCz0L4g0L3QtdGCJ1xuICBjb25zdCBoYXNGYXZvcml0ZUl0ZW1zID0gZmF2b3JpdGVJdGVtc0Ftb3VudCA/IHRydWUgOiBmYWxzZTtcblxuICByZW5kZXJCbG9jayhcbiAgICAndXNlci1ibG9jaycsXG4gICAgYFxuICAgIDxkaXYgY2xhc3M9XCJoZWFkZXItY29udGFpbmVyXCI+XG4gICAgICA8aW1nIGNsYXNzPVwiYXZhdGFyXCIgc3JjPSR7YXZhdGFyTGlua30gYWx0PVwiV2FkZSBXYXJyZW5cIiAvPlxuICAgICAgPGRpdiBjbGFzcz1cImluZm9cIj5cbiAgICAgICAgICA8cCBjbGFzcz1cIm5hbWVcIj4ke3VzZXJOYW1lfTwvcD5cbiAgICAgICAgICA8cCBjbGFzcz1cImZhdlwiPlxuICAgICAgICAgICAgPGkgY2xhc3M9XCJoZWFydC1pY29uJHtoYXNGYXZvcml0ZUl0ZW1zID8gJyBhY3RpdmUnIDogJyd9XCI+PC9pPiR7ZmF2b3JpdGVzQ2FwdGlvbn1cbiAgICAgICAgICA8L3A+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICBgXG4gIClcbn1cbiJdfQ==